exit
clj-whitespace.core=> (-main "resources/count.c")
clj-whitespace.core=> (-main "resources/fib.ws")
exit
(def x (atom '()))
x
(peek x)
(peek @x)
(def v [[:label 3]])
(.indexOf v [:label 3])
(parser/parse (slurp "resources/helloworld.ws"))
(newparser/parse (slurp "resources/helloworld.ws"))
(parser/parse (slurp "resources/helloworld.ws"))
(newparser/parse (slurp "resources/helloworld.ws"))
(.indexOf v [:label 3])
(newparser/parse (slurp "resources/helloworld.ws"))
(slurp "resources/helloworld.ws")
(newparser/parse (slurp "resources/helloworld.ws"))
(newparser/parse "  ")
(newparser/parse "\t   ")
(slurp "resources/helloworld.ws")
(def x (slurp "resources/helloworld.ws"))
(newparser/parse x)
parser/whitespacer
newparser/whitespacer
(newparser/parse (slurp "resources/helloworld.ws"))
(newparser/parse (slurp "resources/count.c"))
(slurp "resources/count.c")
(tokenize (slurp "resources/count.c"))
(newparser/tokenize (slurp "resources/count.c"))
(newparser/parse (slurp "resources/helloworld.ws"))
(newparser/parse (slurp "resources/count.c"))
(newparser/parse (slurp "resources/count.c")) x
(newparser/parse (slurp "resources/count.c")) " "
((newparser/parse (slurp "resources/count.c")) " ")
((newparser/parse (slurp "resources/count.c")))
(newparser/parse (slurp "resources/count.c"))
(newparser/parse (slurp "resources/helloworld.ws"))
(newparser/parse (slurp "resources/count.c"))
(def f (= 3))
f 3
(f 3)
(def f (partial (= 3)))
(f 2)
(def f (partial = 3))
(f 3)
(f 2)
(def f (partial = 3))
(newparser/parse (slurp "resources/count.c"))
(parser/parse (slurp "resources/count.c"))
(interpreter/interpret (parser/parse (slurp "resources/count.c")))
(parser/parse (slurp "resources/count.c"))
(interpreter/interpret (parser/parse (slurp "resources/count.c")))
(interpreter/interpret [[:push 1] [:print-int]])
(interpreter/interpret [[:push 1] :print-int])
(interpreter/interpret [[:push 1] :print-int :end])
(interpreter/interpret (parser/parse (slurp "resources/count.c")))
(interpreter/interpret [[:push 1] :print-int :end])
(parser/parse (slurp "resources/count.c"))
(interpreter/interpret (parser/parse (slurp "resources/count.c")))
(parser/parse (slurp "resources/count.c"))
(interpreter/interpret (parser/parse (slurp "resources/count.c")))
(interpreter/interpret (parser/parse (slurp "resources/helloworld.ws")))
(parser/parse (slurp "resources/helloworld.ws"))
